a = [0x79, 0x35, 0xf6, 0x31, 0x8c, 0x6e, 0x61, 0xaa, 0x52, 0x2e, 0x35, 0xf, 0x2, 0x77, 0x77, 0xa2]
# W1,13 = 1비트로 추측했을때, 13,26번째 0비트
#a->bit 단위로 T에 저장하기위함
T = []
for j in range(0,128):
     T.append((a[(j//8)]>> ((7-(j%8))))&1)


#print(T)

W1 = [0]*128
W2 = [0]*128

   #W2의 마지막 비트를 1로 추측했을때
W1[127] = 0
#W2의 마지막 전 비트를 0로 추측했을때
W1[126] = 1
W1[125] = 0
W1[124] = 0
# W1[12] = W2[127]
# W2[12] = T[12] ^ W1[12]
   
# W1[25] = W2[12]
# W2[25] = T[25] ^ W1[25]

# W1[38] = W2[25]
# W2[38] = T[25] ^ W1[25]

# W1[51] = W2[38]
# W2[51] = T[38] ^ W1[38]

# W1[64] = W2[51]
# W2[64] = T[51] ^ W1[51]

# W1[77] = W2[64]
# W2[77] = T[64] ^ W1[64]

# W1[90] = W2[77]
# W2[90] = T[77] ^ W1[77]

# W1[103] = W2[90]
# W2[103] = T[90] ^ W1[90]

# W1[116] = W2[103]
# W2[116] = T[103] ^ W1[103]

# W1[2] = W2[116]
# W2[2] = T[116] ^ W1[116]
   

for i in range(32):
    #print((127+(i)*12)%128)
    W2[(127+(i+1)*12)%128] = W1[(127 +((i)*12))%128]
    W1[(127+(i+1)*12)%128] = T[(127+(i+1)*12)%128] ^ W2[(127+(i+1)*12)%128]

for i in range(32):
    #print((126-(i+1)*12)%128)
    W2[(126+(i+1)*12)%128] = W1[(126 +i*12)%128]
    W1[(126+(i+1)*12)%128] = T[(126+(i+1)*12)%128] ^ W2[(126+(i+1)*12)%128]
#print()

for i in range(32):
    #print((125-(i+1)*12)%128)
    W2[(125+(i+1)*12)%128] = W1[(125 +i*12)%128]
    W1[(125+(i+1)*12)%128] = T[(125+(i+1)*12)%128] ^ W2[(125+(i+1)*12)%128]
for i in range(32):
    #print((124-(i+1)*12)%128)
    W2[(124+(i+1)*12)%128] = W1[(124 +i*12)%128]
    W1[(124+(i+1)*12)%128] = T[(124+(i+1)*12)%128] ^ W2[(124+(i+1)*12)%128]



for j in range(0,128):
    #print((7-(j%8)+(8*(j//8))))
    if j % 8 ==0 and j > 0:
        print()
    print(W1[j],end='')
    #print(W1[(7-(j%8)+(8*(j//8)))],end='')